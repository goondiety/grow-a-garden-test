local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local espMap = {}

-- === Crop Classification Data ===
local cropCategories = {
    Obtainable = {
        Common = {"Carrot", "Strawberry"},
        Uncommon = {"Blueberry", "Manuka Flower", "Orange Tulip", "Rose", "Lavender"},
        Rare = {"Tomato", "Corn", "Dandelion", "Daffodil", "Nectarshade", "Raspberry", "Foxglove"},
        Legendary = {"Watermelon", "Pumpkin", "Apple", "Bamboo", "Lilac", "Lumira"},
        Mythical = {"Coconut", "Cactus", "Dragon Fruit", "Honeysuckle", "Mango", "Nectarine", "Peach", "Pineapple", "Pink Lily", "Purple Dahlia"},
        Divine = {"Grape", "Mushroom", "Pepper", "Cacao", "Hive Fruit", "Sunflower"},
        Prismatic = {"Beanstalk", "Ember Lily"},
    },
    Unobtainable = {
        Common = {"Chocolate crops"},
        Uncommon = {"Red Lollipop", "Nightshade"},
        Rare = {"Candy Sunflower", "Mint", "Glowshroom", "Pear"},
        Legendary = {"Cranberry", "Durian", "Easter Egg", "Papaya"},
        Mythical = {"Celestiberry", "Blood Banana", "Moon Melon", "Eggplant", "Passionfruit", "Lemon", "Banana"},
        Divine = {"Cherry Blossom", "Crimson Vine", "Candy Blossom", "Lotus", "Venus Fly Trap", "Cursed Fruit", "Soul Fruit", "Mega Mushroom", "Moon Blossom", "Moon Mango"},
    }
}

local cropSet = {}
for obtain, rarities in pairs(cropCategories) do
    for rarity, crops in pairs(rarities) do
        for _, crop in ipairs(crops) do
            cropSet[crop:lower()] = {obtain = obtain, rarity = rarity}
        end
    end
end

local rarityColors = {
    Common = Color3.fromRGB(180, 180, 180),
    Uncommon = Color3.fromRGB(80, 200, 80),
    Rare = Color3.fromRGB(80, 120, 255),
    Legendary = Color3.fromRGB(255, 215, 0),
    Mythical = Color3.fromRGB(255, 100, 255),
    Divine = Color3.fromRGB(255, 90, 90),
    Prismatic = Color3.fromRGB(100, 255, 255),
}

-- === ESP Core ===
local function getPrimaryPart(model)
    if model.PrimaryPart then return model.PrimaryPart end
    for _, part in ipairs(model:GetChildren()) do
        if part:IsA("BasePart") then
            model.PrimaryPart = part
            return part
        end
    end
    return nil
end

local function createESP(model, text)
    if espMap[model] then
        espMap[model].Text = text
        return
    end

    local pp = getPrimaryPart(model)
    if not pp then return end

    -- Billboard GUI
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP"
    billboard.Adornee = pp
    billboard.Size = UDim2.new(0, 140, 0, 40)
    billboard.StudsOffset = Vector3.new(0, 4, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = model

    -- Background Frame
    local bgFrame = Instance.new("Frame", billboard)
    bgFrame.Size = UDim2.new(1, 0, 1, 0)
    bgFrame.BackgroundColor3 = Color3.new(0, 0, 0)
    bgFrame.BackgroundTransparency = 0.4
    bgFrame.BorderSizePixel = 0

    local corner = Instance.new("UICorner", bgFrame)
    corner.CornerRadius = UDim.new(0, 4)

    -- Label
    local label = Instance.new("TextLabel", bgFrame)
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0.25
    label.Text = text
    label.Font = Enum.Font.GothamBold
    label.TextSize = 13
    label.TextWrapped = true
    label.TextYAlignment = Enum.TextYAlignment.Center
    label.TextXAlignment = Enum.TextXAlignment.Center

    espMap[model] = label
end

local function cleanupESP(validModels)
    for model, label in pairs(espMap) do
        if not validModels[model] then
            if label and label.Parent then
                label.Parent:Destroy()
            end
            espMap[model] = nil
        end
    end
end

-- === ESP Update Loop ===
local maxDistance = 25
local maxESP = 10

RunService.Stepped:Connect(function()
    local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end

    local validModels = {}
    local nearest = {}

    for _, model in ipairs(workspace:GetDescendants()) do
        if model:IsA("Model") and cropSet[model.Name:lower()] then
            local pp = getPrimaryPart(model)
            if pp then
                local dist = (pp.Position - root.Position).Magnitude
                if dist <= maxDistance then
                    table.insert(nearest, {model = model, dist = dist})
                end
            end
        end
    end

    table.sort(nearest, function(a, b) return a.dist < b.dist end)

    for i = 1, math.min(#nearest, maxESP) do
        local model = nearest[i].model
        local data = cropSet[model.Name:lower()]
        local color = rarityColors[data.rarity] or Color3.new(1, 1, 1)

        local weight, price
        for _, val in ipairs(model:GetChildren()) do
            if val:IsA("NumberValue") then
                local lname = val.Name:lower()
                if lname:find("weight") then weight = val.Value end
                if lname:find("price") or lname:find("sell") then price = val.Value end
            end
        end

        local text = model.Name
        if weight then text = text .. "\nWt.: " .. tostring(weight) end
        if price then text = text .. "\nPrice: " .. tostring(price) end

        createESP(model, text)
        if espMap[model] then
            espMap[model].TextColor3 = color
        end
        validModels[model] = true
    end

    cleanupESP(validModels)
end)
